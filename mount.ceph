#!/usr/bin/env python3

"""
mount.ceph helper script
when placed or symlinked in /sbin/mount.ceph,
it can be invoked e.g. by the `mount` tool or systemd .mount units.

should behave like ceph's mount.ceph but this is a pure-python implementation.

(c) 2019-2020 Jonas Jelten <jj@sft.lol>
Released under GPLv3 or later.
"""

import argparse
import os
import sys

from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader
from pathlib import Path



def main():
    """
    pick interesting arguments from the mount options
    and invoke the cephfs_mount tool.
    """
    # load the cephfs_mount module that actually uploads the key
    # and mounts the filesystem
    real_tool = "cephfs_mount"
    real_tool_path = Path(__file__).resolve().parent / real_tool

    if real_tool_path.is_file():
        # first, try to load the cephfs_mount from the resolved current directory
        # (i.e. follow all symlinks to the development repo)
        spec = spec_from_loader(real_tool,
                                SourceFileLoader(real_tool, str(real_tool_path)))
        cephfs_mount = module_from_spec(spec)
        spec.loader.exec_module(cephfs_mount)
    else:
        # otherwise, import regularly
        import cephfs_mount

    cli = argparse.ArgumentParser(
        description=("Mount CephFS, a distributed cluster filesystem."),
    )
    cli.add_argument("-v", "--verbose", action="count", default=0,
                     help="increase program verbosity")
    cli.add_argument("-q", "--quiet", action="count", default=0,
                     help="decrease program verbosity")
    cli.add_argument("--user", default="admin",
                     help=("default username for authentication if -o name=$username"
                           " is missing. default is %(default)s."))
    cli.add_argument("--keyfile", default="/etc/ceph/ceph.client.admin.keyring",
                     help=("default secret keyfile if -o secretfile=$file is missing."
                           " default is %(default)s, but determined by username"))
    cli.add_argument("-o", "--options", default="rw",
                     help=("ceph mount options, e.g.: rw,name=username,secretfile=..."
                           " default value is -o %(default)s."))
    cli.add_argument("source",
                     help=("mount source, format: mon1,mon2,mon3:/path. "
                           "use :/path to use monitor addresses from /etc/ceph/ceph.conf"))
    cli.add_argument("destination", help="mount destination")
    args = cli.parse_args()

    cephfs_mount.log_setup(args.verbose - args.quiet)

    if os.geteuid() != 0:
        sys.exit("need root privileges")

    sources = args.source.split(":", maxsplit=1)
    if len(sources) != 2:
        cli.error("mount source invalid: missing ':' in %s" % (sources,))
    monitors, source_path = sources

    options = args.options.split(",")
    cleaned_options_list = []

    keyfile = None
    username = None

    for option in options:
        if "=" in option and option[-1] != "=":
            option_left = option.split("=")[0]
            if option_left == "secret":
                cli.error("secret=... no longer possible, "
                          "use secretfile= instead")
            elif option_left == "noauto":
                continue
            elif option_left in ("secretfile", "keyfile"):
                keyfile = option.split("=")[1]
                continue
            elif option_left == "name":
                username = option.split("=")[1]
                continue

        cleaned_options_list.append(option)

    cleaned_options = ",".join(cleaned_options_list)

    if not keyfile:
        keyfile = args.keyfile

    if not username:
        username = args.user

    # call to the actual mount tool
    cephfs_mount.ceph_mount(monitors,
                            source_path,
                            args.destination,
                            username,
                            keyfile,
                            keyid=None,
                            mount_options=cleaned_options,
                            no_kernel_keyring=False,
                            kernel_resolve=False)


if __name__ == "__main__":
    main()
